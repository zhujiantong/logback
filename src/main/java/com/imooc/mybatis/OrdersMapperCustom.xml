<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace命名空间，为了对sql语句进行隔离，方便管理 ，mapper开发dao方式，使用namespace有特殊作用
mapper代理开发时将namespace指定为mapper接口的全限定名
 -->
<mapper namespace="com.imooc.mybatis.OrdersMapperCustom">

<!-- 订单查询关联用户的ResultMap 
将整个查询结果映射到"cn.itcast.mybatis.po.Orders"中
-->
<resultMap type="com.imooc.entity.Orders" id="OrdersResultMap">
<!-- 配置映射的订单信息 -->
<!-- id:订单信息的唯一标识，如果多个列组成唯一标识，需要配置多个id 
 column:订单信息的唯一标识列
 property:订单信息的唯一标识列对应Orders的属性
-->
<id column="id" property="id"/>
<result column="user_id" property="userId"/>
<result column="number" property="number"/>
<result column="createtime" property="createtime"/>
<result column="note" property="note"/>

<!-- 配置映射的关联的用户信息-->
<!-- association:用于映射关联查询单个对象的信息
     property:要将关联查询的用户映射到Orders中的属性
 -->
<association property="user" javaType="com.imooc.entity.User">
<!-- id:用户的唯一标识 -->
<id column="user_id" property="id"/>
<result column="username" property="username"/>
<result column="sex" property="sex"/>
<result column="address" property="address"/>
</association>

</resultMap>



<!-- 订单以及订单明细的ResultMap 
使用继承，就不用再配置订单信息和用户信息的映射
-->
<resultMap type="com.imooc.entity.Orders" id="OrdersAndOrderDetailResultMap" extends="OrdersResultMap">
<!-- 订单明细 
一个订单关联查询出多条明细，要使用collection进行映射
collection:对关联查询到多条记录映射到Order中的属性
ofType:指定映射到集合属性中pojo的类型
-->
<collection property="orderdetails" ofType="com.imooc.entity.Orderdetail">
<!-- id:订单明细的唯一标识 -->
<id column="orderDetail_id" property="id"/>
<result column="items_id" property="itemsId"/>
<result column="items_num" property="itemsNum"/>
<result column="orders_id" property="ordersId"/>
</collection>

</resultMap>

<!--查询用户及其购买的商品的ResultMap  -->
<resultMap id="UserAndItemsResultMap" type="com.imooc.entity.User">
<!-- id:用户的唯一标识 -->
<id column="user_id" property="id"/>
<result column="username" property="username"/>
<result column="sex" property="sex"/>
<result column="address" property="address"/>
<!-- 订单信息
一个用户对应多个订单看，使用collection映射
 -->
	<collection property="ordersList" ofType="com.imooc.entity.Orders">
	  <id column="id" property="id"/>
	  <result column="user_id" property="userId"/>
       <result column="number" property="number"/>
       <result column="createtime" property="createtime"/>
       <result column="note" property="note"/>
	  
		 <!-- 订单明细
			   一个订单包括多个明细
	     -->
	       <collection property="orderdetails" ofType="com.imooc.entity.Orderdetail">
				<!-- id:订单明细的唯一标识 -->
				<id column="orderDetail_id" property="id"/>
				<result column="items_id" property="itemsId"/>
				<result column="items_num" property="itemsNum"/>
				<result column="orders_id" property="ordersId"/>
				
			<!-- 商品信息
			一个订单明细对应一个商品
			 -->
			<association property="items" javaType="com.imooc.entity.Items">
			    <!-- id:订单明细的唯一标识 -->
				<id column="items_id" property="id"/>
				<result column="items_name" property="name"/>
				<result column="items_price" property="price"/>
				<result column="items_detail" property="detail"/>
			</association>
			</collection>
	</collection>
</resultMap>



  <!-- 查询用户及其购买的商品 -->
 <select id="findUserAndItemsResultMap" resultMap="UserAndItemsResultMap">
   select 
    orders.*,
    user.username,
    user.sex,
    user.address,
    orderDetail.id orderDetail_id,
    orderDetail.items_id,
    orderDetail.items_num,
    orderDetail.orders_id,
    items.`name` items_name,
    items.`price` items_price,
    items.detail items_detail
    from
    orders,
    user,
    orderDetail,
    items
   where orders.user_id = user.id AND orderDetail.orders_id = orders.id AND items.id=orderDetail.items_id
 </select>


  <!-- 查询订单关联查询用户 -->
 <select id="findOrdersAndOrderDetailResultMap" resultMap="OrdersAndOrderDetailResultMap">
  select 
    orders.*,
    user.username,
    user.sex,
    user.address,
    orderDetail.id orderDetail_id,
    orderDetail.items_id,
    orderDetail.items_num,
    orderDetail.orders_id
    from
    orders,
    user,
    orderDetail
   where orders.user_id = user.id AND orderDetail.orders_id = orders.id
 </select>

<!-- 查询订单关联查询用户 -->
 <select id="findOrdersUser" resultType="com.imooc.entity.OrdersCustom">
  select 
    orders.*,
    user.username,
    user.sex,
    user.address
    from
    orders,
    user
   where orders.user_id = user.id
 </select>
 
 <!-- 查询订单关联查询用户 -->
 <select id="findOrdersUserResultMap" resultMap="OrdersResultMap">
  select 
    orders.*,
    user.username,
    user.sex,
    user.address
    from
    orders,
    user
   where orders.user_id = user.id 
 </select>
 
 
  <!-- 延迟加载的resultMap -->
 <resultMap type="com.imooc.entity.Orders" id="OrdersUserLazyLoadingResultMap">
        <!--对订单信息进行映射配置  -->
        <id column="id" property="id"/>
		<result column="user_id" property="userId"/>
		<result column="number" property="number"/>
		<result column="createtime" property="createtime"/>
		<result column="note" property="note"/>
		
		 <!-- 实现对用户信息进行延迟加载
		   select:指定延迟加载需要执行的statement的id(是根据user_id查询用户信息的statement)
		   要使用userMapper.xml中的finduserById完成用户信息根据用户id(user_id)用户信息的查询
		   column:订单信息中关联用户信息查询的列，是user_id
		   关联查询的sql理解为：
		   select orders.*,
		   (select username from user where orders.user_id =user.id) username,
		     (select sex from user where orders.user_id =user.id) sex
		     from orders
		  -->
		<association property="user" javaType="com.imooc.entity.User"  select="com.imooc.entity.mybatis.UserMapper.findUserById" column="user_id">
		  <!--   <association property="user" javaType="cn.itcast.mybatis.po.User"> -->
		        <!-- id:用户的唯一标识 -->
				<id column="user_id" property="id"/>
				<result column="username" property="username"/>
				<result column="sex" property="sex"/>
				<result column="address" property="address"/>
		</association>

 </resultMap>
 
 <!-- 查询订单关联查询用户，用户信息需要延迟加载 -->
<select id="findOrdersUserLazyLoadingMap" resultMap="OrdersUserLazyLoadingResultMap">
      Select * from orders
</select>
</mapper>

